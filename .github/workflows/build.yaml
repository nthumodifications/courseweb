name: Build and Deploy Next.js to GHCR

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    permissions: write-all
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create .env file with secrets
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_ALGOLIA_APP_ID=${{ secrets.NEXT_PUBLIC_ALGOLIA_APP_ID }}" >> .env
          echo "NEXT_PUBLIC_ALGOLIA_SEARCH_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_SEARCH_KEY }}" >> .env
          echo "NEXT_PUBLIC_ALGOLIA_TEMP_APP_ID=${{ secrets.NEXT_PUBLIC_ALGOLIA_TEMP_APP_ID }}" >> .env
          echo "NEXT_PUBLIC_ALGOLIA_TEMP_SEARCH_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_TEMP_SEARCH_KEY }}" >> .env
          echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env
          echo "NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}" >> .env
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          echo "SENTRY_ORG=${{ secrets.SENTRY_ORG }}" >> .env
          echo "SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" >> .env

      # Build and tag Docker image using .env file
      - name: Build Docker image
        run: |
          docker build . \
            -t ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.IMAGE_NAME }}:latest

      # Push Docker image to GHCR
      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

      # Clean up .env file (security step)
      - name: Clean up .env
        if: always()
        run: |
          rm -f .env

      # Trigger Coolify deployment (optional webhook)
      - name: Trigger Coolify deployment
        run: |
          curl --request GET "${{ secrets.COOLIFY_WEBHOOK }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"
        if: success()
